http:
  port: ${PORT}

admin:
  port: 9876              # Port pro administrační rozhraní Express Gateway
  hostname: localhost     # Hostname pro administrační rozhraní

apiEndpoints:
  api:
    host: 'localhost'
    paths: '/auth/*'
serviceEndpoints:
  service:
    url: 'http://localhost:3001'
policies:
  - proxy
pipelines:
  default:
    apiEndpoints:
      - api
    policies:
      - proxy:
          - action:
              serviceEndpoint: service
              changeOrigin: true

#http:
#  port: ${PORT}
#
#admin:
#  port: 9876
#  host: localhost
#
#apiEndpoints:
#  auth:
#    host: *
#    methods: ['POST', 'GET', 'PUT', 'DELETE']
#    paths: ['/auth', '/auth/*']
#  authGoogle:
#    host: *
#    methods: ['POST', 'GET', 'PUT', 'DELETE']
#    paths: ['/auth/google/','/auth/google/*']
#  users:
#    host: *
#    methods: ['POST', 'GET', 'PUT', 'DELETE']
#    paths: ['/users/', '/users/*']
#  profiles:
#    host: *
#    methods: ['POST', 'GET', 'PUT', 'DELETE']
#    paths: '/profiles/*'
#  roles:
#    host: *
#    methods: ['POST', 'GET', 'PUT', 'DELETE']
#    paths: '/roles/*'
##  memberships:
##    host: localhost
##    methods: ['POST', 'GET', 'PUT', 'DELETE']
##    paths: 'memberships/*'
##  payments:
##    host: localhost
##    methods: ['POST', 'GET', 'PUT', 'DELETE']
##    paths: 'api/payments/*'
##  subscriptions:
##    host: localhost
##    methods: ['POST', 'GET', 'PUT', 'DELETE']
##    paths: 'api/subscriptions/*'
##  bookings:
##    host: localhost
##    methods: ['POST', 'GET', 'PUT', 'DELETE']
##    paths: 'api/bookings/*'
##  activities:
##    host: localhost
##    methods: ['POST', 'GET', 'PUT', 'DELETE']
##    paths: 'api/activities/*'
##  schedules:
##    host: localhost
##    methods: ['POST', 'GET', 'PUT', 'DELETE']
##    paths: 'api/schedules/*'
##  swagger:
##    host: localhost
##    methods: ['POST', 'GET', 'PUT', 'DELETE']
##    paths: '/docs'
#
#serviceEndpoints:
#  userService:
#    url: 'http://localhost:3001/api'
##  membershipService:
##    url: 'http://localhost:3002/api'
##  bookingService:
##    url: 'http://localhost:3003/api'
##  swaggerService:
##    url: 'http://localhost:3000/docs'
#
#policies:
#  - proxy:
#      - action:
#          changeOrigin: true
#  - jwt:
#      - action:
#          secretOrPublicKeyFile: ${JWT_SECRET}
#          checkCredentialExistence: false
#  - log:
#      - action:
#          message: "{req.method} {req.originalUrl} ${JSON.stringify(req.headers)}"
##  - proxy:
##      - action:
##          serviceEndpoint: swaggerService
##          changeOrigin: true
##  - basic-auth
##  - cors
##  - expression
##  - key-auth
##  - oauth2
##  - rate-limit
#
#pipelines:
#  userPipeline:
#    apiEndpoints:
#      - auth
#      - authGoogle
#      - users
#      - profiles
#      - roles
##    policies:
##      - log:
##          - action:
##              message: "Request to ${req.method} ${req.originalUrl} with headers ${JSON.stringify(req.headers)}"
#      - proxy:
#          - action:
#              serviceEndpoint: userService
##  membershipPipeline:
##    apiEndpoints:
##      - memberships
##      - payments
##      - subscriptions
##    policies:
###      - log:
###          - action:
###              message: "Request to ${req.method} ${req.originalUrl} with headers ${JSON.stringify(req.headers)}"
##      - proxy:
##          - action:
##              serviceEndpoint: membershipService
##  bookingPipeline:
##    apiEndpoints:
##      - activity
##      - bookings
##      - activities
##      - schedules
##    policies:
###      - log:
###          - action:
###              message: "Request to ${req.method} ${req.originalUrl} with headers ${JSON.stringify(req.headers)}"
##      - proxy:
##          - action:
##              serviceEndpoint: bookingService
###  swaggerPipeline:
###    apiEndpoints:
###      - swagger
###    policies:
###      - proxy:
###          - action:
###              serviceEndpoint: swaggerService