# gateway.config.yml
http:
  port: ${PORT_EXPRESS_GATEWAY}

admin:
  port: 9876
  host: localhost

log:
  - name: default
    level: info
    streams:
      - stream: stdout
        level: debug

apiEndpoints:
  api:
    host: "*"
    methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
  auth:
    host: "*"
    methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
    paths: ['/auth/', '/auth/*']
  users:
    host: "*"
    methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
    paths: ['/users/', '/users/*']
  profiles:
    host: "*"
    methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
    paths: '/profiles/*'
  roles:
    host: "*"
    methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
    paths: '/roles/*'
  memberships:
    host: "*"
    methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
    paths: 'memberships/*'
  payments:
    host: "*"
    methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
    paths: 'api/payments/*'
  subscriptions:
    host: "*"
    methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
    paths: 'api/subscriptions/*'
  bookings:
    host: "*"
    methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
    paths: 'api/bookings/*'
  activities:
    host: "*"
    methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
    paths: 'api/activities/*'
  schedules:
    host: "*"
    methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
    paths: 'api/schedules/*'
  swagger:
    host: "*"
    methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
    paths: '/docs'

serviceEndpoints:
  apiService:
    url: "http://app-api-gateway:3005"
  userService:
    url: "http://app-user-management-service:3001/api"
  membershipService:
    url: "http://app-management-service:3002/api"
  bookingService:
    url: "http://app-booking-service:3003/api"
  swaggerService:
    url: "http://frontend:3000/docs"

policies:
  - proxy
  - jwt
  - log
  - basic-auth
  - cors
  - expression
  - key-auth
  - oauth2
  - rate-limit

pipelines:
  apiPipeline:
    apiEndpoints:
      - api
    policies:
      - log:
          - action:
              message: "Request to ${req.method} with ${req.path} ${req.originalUrl} with headers ${JSON.stringify(req.headers)} requesting IP: ${req.ip} origin ${req.headers.origin}"
      - cors:
          - action:
              origin: [ "http://localhost:3000" ]
              methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
              allowedHeaders: [ "*" ]
              credentials: true
      - proxy:
          - action:
              serviceEndpoint: apiService
              changeOrigin: true

  userPipeline:
    apiEndpoints:
      - auth
      - users
      - profiles
      - roles
    policies:
      - log:
          - action:
              message: "Request to ${req.method} ${req.originalUrl} with headers ${JSON.stringify(req.headers)}"
      - proxy:
          - action:
              serviceEndpoint: userService
              changeOrigin: true
      - cors:
          - action:
              origin: [ "*" ]
              methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
              allowedHeaders: [ "*"]
              credentials: true
  membershipPipeline:
    apiEndpoints:
      - memberships
      - payments
      - subscriptions
    policies:
      - log:
          - action:
              message: "Request to ${req.method} ${req.originalUrl} with headers ${JSON.stringify(req.headers)}"
      - proxy:
          - action:
              serviceEndpoint: membershipService
              changeOrigin: true
      - cors:
          - action:
              origin: [ "*" ]
              methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
              allowedHeaders: [ "*" ]
              credentials: true
  bookingPipeline:
    apiEndpoints:
      - activity
      - bookings
      - activities
      - schedules
    policies:
      - log:
          - action:
              message: "Request to ${req.method} ${req.originalUrl} with headers ${JSON.stringify(req.headers)}"
      - proxy:
          - action:
              serviceEndpoint: bookingService
              changeOrigin: true
      - cors:
          - action:
              origin: [ "*" ]
              methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
              allowedHeaders: [ "*" ]
              credentials: true
  swaggerPipeline:
    apiEndpoints:
      - swagger
    policies:
      - proxy:
          - action:
              serviceEndpoint: swaggerService
              changeOrigin: true
      - cors:
          - action:
              origin: [ "*" ]
              methods: [ "HEAD", "GET", "POST", "PUT", "DELETE" ]
              allowedHeaders: [ "*" ]
              credentials: true
