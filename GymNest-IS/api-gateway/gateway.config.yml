http:
  port: 8080

admin:
  port: 9876
  host: localhost

apiEndpoints:
  auth:
    host: localhost
    methods: ['POST', 'GET']
    paths: ['api/auth', 'api/auth/*']
  authGoogle:
    host: localhost
    methods: ['POST', 'GET']
    paths: ['api/auth/google/','api/auth/google/*']
  users:
    host: localhost
    methods: ['POST', 'GET']
    paths: ['api/users/', 'api/users/*']
  profiles:
    host: localhost
    methods: ['POST', 'GET']
    paths: 'api/profiles/*'
  roles:
    host: localhost
    methods: ['POST', 'GET']
    paths: 'api/roles/*'
  memberships:
    host: localhost
    methods: ['POST', 'GET']
    paths: 'api/memberships/*'
  payments:
    host: localhost
    methods: ['POST', 'GET']
    paths: 'api/payments/*'
  subscriptions:
    host: localhost
    methods: ['POST', 'GET']
    paths: 'api/subscriptions/*'
  bookings:
    host: localhost
    methods: ['POST', 'GET']
    paths: 'api/bookings/*'
  activities:
    host: localhost
    methods: ['POST', 'GET']
    paths: 'api/activities/*'
  schedules:
    host: localhost
    methods: ['POST', 'GET']
    paths: 'api/schedules/*'
  swagger:
    host: localhost
    methods: ['POST', 'GET']
    paths: '/docs'

serviceEndpoints:
  userService:
    url: 'http://localhost:3001'
  membershipService:
    url: 'http://localhost:3002'
  bookingService:
    url: 'http://localhost:3003'
  swaggerService:
    url: 'http://localhost:3000/docs'

policies:
  - proxy:
      - action:
          changeOrigin: true
  - jwt:
      - action:
          secretOrPublicKeyFile: ${JWT_SECRET}
          checkCredentialExistence: false
  - log:
      - action:
          message: "{req.method} {req.originalUrl} ${JSON.stringify(req.headers)}"
  - proxy:
      - action:
          serviceEndpoint: swaggerService
          changeOrigin: true
  - basic-auth
  - cors
  - expression
  - key-auth
  - oauth2
  - proxy
  - rate-limit

pipelines:
  userPipeline:
    apiEndpoints:
      - auth
      - authGoogle
      - users
      - profiles
      - roles
    policies:
      - log:
          - action:
              message: "Request to ${req.method} ${req.originalUrl} with headers ${JSON.stringify(req.headers)}"
      - proxy:
          - action:
              serviceEndpoint: userService
  membershipPipeline:
    apiEndpoints:
      - memberships
      - payments
      - subscriptions
    policies:
      - log:
          - action:
              message: "Request to ${req.method} ${req.originalUrl} with headers ${JSON.stringify(req.headers)}"
      - proxy:
          - action:
              serviceEndpoint: membershipService
  bookingPipeline:
    apiEndpoints:
      - activity
      - bookings
      - activities
      - schedules
    policies:
      - log:
          - action:
              message: "Request to ${req.method} ${req.originalUrl} with headers ${JSON.stringify(req.headers)}"
      - proxy:
          - action:
              serviceEndpoint: bookingService
  swaggerPipeline:
    apiEndpoints:
      - swagger
    policies:
      - proxy:
          - action:
              serviceEndpoint: swaggerService