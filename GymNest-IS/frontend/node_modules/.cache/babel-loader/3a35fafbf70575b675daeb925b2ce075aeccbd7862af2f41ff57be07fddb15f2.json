{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\GymNest\\\\GymNest-IS\\\\frontend\\\\src\\\\components\\\\PayPalButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialOptions = {\n  \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID,\n  // Sandbox client ID\n  currency: \"USD\",\n  intent: \"capture\"\n}; //! move to env after creating paypal sandbox account\n\nconst PayPalButton = () => {\n  _s();\n  const handleApprove = (data, actions) => {\n    // logic here\n    console.log(\"Platba byla úspěšná!\", data, actions);\n    return actions.order.capture();\n  };\n  const [message, setMessage] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: initialOptions,\n      children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n        style: {\n          shape: \"rect\",\n          layout: \"vertical\"\n        },\n        createOrder: async () => {\n          try {\n            const response = await fetch(\"/api/orders\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              // use the \"body\" param to optionally pass additional order information\n              // like product ids and quantities\n              body: JSON.stringify({\n                cart: [{\n                  id: \"YOUR_PRODUCT_ID\",\n                  quantity: \"YOUR_PRODUCT_QUANTITY\"\n                }]\n              })\n            });\n            const orderData = await response.json();\n            if (orderData.id) {\n              return orderData.id;\n            } else {\n              var _orderData$details;\n              const errorDetail = orderData === null || orderData === void 0 ? void 0 : (_orderData$details = orderData.details) === null || _orderData$details === void 0 ? void 0 : _orderData$details[0];\n              const errorMessage = errorDetail ? `${errorDetail.issue} ${errorDetail.description} (${orderData.debug_id})` : JSON.stringify(orderData);\n              throw new Error(errorMessage);\n            }\n          } catch (error) {\n            console.error(error);\n            setMessage(`Could not initiate PayPal Checkout...${error}`);\n          }\n        },\n        onApprove: async (data, actions) => {\n          try {\n            var _orderData$details2;\n            const response = await fetch(`/api/orders/${data.orderID}/capture`, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n            const orderData = await response.json();\n            // Three cases to handle:\n            //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()\n            //   (2) Other non-recoverable errors -> Show a failure message\n            //   (3) Successful transaction -> Show confirmation or thank you message\n\n            const errorDetail = orderData === null || orderData === void 0 ? void 0 : (_orderData$details2 = orderData.details) === null || _orderData$details2 === void 0 ? void 0 : _orderData$details2[0];\n            if ((errorDetail === null || errorDetail === void 0 ? void 0 : errorDetail.issue) === \"INSTRUMENT_DECLINED\") {\n              // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()\n              // recoverable state, per https://developer.paypal.com/docs/checkout/standard/customize/handle-funding-failures/\n              return actions.restart();\n            } else if (errorDetail) {\n              // (2) Other non-recoverable errors -> Show a failure message\n              throw new Error(`${errorDetail.description} (${orderData.debug_id})`);\n            } else {\n              // (3) Successful transaction -> Show confirmation or thank you message\n              // Or go to another URL:  actions.redirect('thank_you.html');\n              const transaction = orderData.purchase_units[0].payments.captures[0];\n              setMessage(`Transaction ${transaction.status}: ${transaction.id}. See console for all available details`);\n              console.log(\"Capture result\", orderData, JSON.stringify(orderData, null, 2));\n            }\n          } catch (error) {\n            console.error(error);\n            setMessage(`Sorry, your transaction could not be processed...${error}`);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      content: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_s(PayPalButton, \"EiOGSxO4GWQlH0sM782nQ9JwuAs=\");\n_c = PayPalButton;\nexport default PayPalButton;\nvar _c;\n$RefreshReg$(_c, \"PayPalButton\");","map":{"version":3,"names":["React","useState","PayPalScriptProvider","PayPalButtons","jsxDEV","_jsxDEV","initialOptions","process","env","REACT_APP_PAYPAL_CLIENT_ID","currency","intent","PayPalButton","_s","handleApprove","data","actions","console","log","order","capture","message","setMessage","className","children","options","style","shape","layout","createOrder","response","fetch","method","headers","body","JSON","stringify","cart","id","quantity","orderData","json","_orderData$details","errorDetail","details","errorMessage","issue","description","debug_id","Error","error","onApprove","_orderData$details2","orderID","restart","transaction","purchase_units","payments","captures","status","fileName","_jsxFileName","lineNumber","columnNumber","Message","content","_c","$RefreshReg$"],"sources":["D:/Documents/GymNest/GymNest-IS/frontend/src/components/PayPalButton.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\r\n\r\nconst initialOptions = {\r\n    \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID, // Sandbox client ID\r\n    currency: \"USD\",\r\n    intent: \"capture\"\r\n}; //! move to env after creating paypal sandbox account\r\n\r\nconst PayPalButton = () => {\r\n    const handleApprove = (data, actions) => {\r\n        // logic here\r\n        console.log(\"Platba byla úspěšná!\", data, actions);\r\n        return actions.order.capture();\r\n    };\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    return (\r\n        <div className=\"App\">\r\n          <PayPalScriptProvider options={initialOptions}>\r\n            <PayPalButtons\r\n              style={{\r\n                shape: \"rect\",\r\n                layout: \"vertical\",\r\n              }}\r\n              createOrder={async () => {\r\n                try {\r\n                  const response = await fetch(\"/api/orders\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                      \"Content-Type\": \"application/json\",\r\n                    },\r\n                    // use the \"body\" param to optionally pass additional order information\r\n                    // like product ids and quantities\r\n                    body: JSON.stringify({\r\n                      cart: [\r\n                        {\r\n                          id: \"YOUR_PRODUCT_ID\",\r\n                          quantity: \"YOUR_PRODUCT_QUANTITY\",\r\n                        },\r\n                      ],\r\n                    }),\r\n                  });\r\n\r\n                  const orderData = await response.json();\r\n\r\n                  if (orderData.id) {\r\n                    return orderData.id;\r\n                  } else {\r\n                    const errorDetail = orderData?.details?.[0];\r\n                    const errorMessage = errorDetail\r\n                      ? `${errorDetail.issue} ${errorDetail.description} (${orderData.debug_id})`\r\n                      : JSON.stringify(orderData);\r\n\r\n                    throw new Error(errorMessage);\r\n                  }\r\n                } catch (error) {\r\n                  console.error(error);\r\n                  setMessage(`Could not initiate PayPal Checkout...${error}`);\r\n                }\r\n              }}\r\n              onApprove={async (data, actions) => {\r\n                try {\r\n                  const response = await fetch(\r\n                    `/api/orders/${data.orderID}/capture`,\r\n                    {\r\n                      method: \"POST\",\r\n                      headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                      },\r\n                    },\r\n                  );\r\n\r\n                  const orderData = await response.json();\r\n                  // Three cases to handle:\r\n                  //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()\r\n                  //   (2) Other non-recoverable errors -> Show a failure message\r\n                  //   (3) Successful transaction -> Show confirmation or thank you message\r\n\r\n                  const errorDetail = orderData?.details?.[0];\r\n\r\n                  if (errorDetail?.issue === \"INSTRUMENT_DECLINED\") {\r\n                    // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()\r\n                    // recoverable state, per https://developer.paypal.com/docs/checkout/standard/customize/handle-funding-failures/\r\n                    return actions.restart();\r\n                  } else if (errorDetail) {\r\n                    // (2) Other non-recoverable errors -> Show a failure message\r\n                    throw new Error(\r\n                      `${errorDetail.description} (${orderData.debug_id})`,\r\n                    );\r\n                  } else {\r\n                    // (3) Successful transaction -> Show confirmation or thank you message\r\n                    // Or go to another URL:  actions.redirect('thank_you.html');\r\n                    const transaction =\r\n                      orderData.purchase_units[0].payments.captures[0];\r\n                    setMessage(\r\n                      `Transaction ${transaction.status}: ${transaction.id}. See console for all available details`,\r\n                    );\r\n                    console.log(\r\n                      \"Capture result\",\r\n                      orderData,\r\n                      JSON.stringify(orderData, null, 2),\r\n                    );\r\n                  }\r\n                } catch (error) {\r\n                  console.error(error);\r\n                  setMessage(\r\n                    `Sorry, your transaction could not be processed...${error}`,\r\n                  );\r\n                }\r\n              }}\r\n            />\r\n          </PayPalScriptProvider>\r\n          <Message content={message} />\r\n        </div>\r\n      );\r\n};\r\n\r\nexport default PayPalButton;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}